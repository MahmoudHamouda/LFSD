name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    name: Lint, Test, Build, Push, and Deploy
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install Frontend Dependencies
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      # Step 4: Cache Node Modules
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 5: Build Frontend
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

      # Step 6: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Log in to GCR
        run: gcloud auth configure-docker --quiet

      # Step 7: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 8: Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)

          # Build and push to Google Container Registry
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:$IMAGE_TAG -f docker/Dockerfile.lfsd .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:$IMAGE_TAG

          # Tag and push to Docker Hub
          docker tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:$IMAGE_TAG hamoum/lfsd:latest
          docker push hamoum/lfsd:latest

      # Step 9: Apply Kubernetes Configurations
      - name: Deploy Kubernetes Resources
        run: |
          kubectl apply -f k8s/secrets.yaml --validate=false
          kubectl apply -f k8s/volumes.yaml --validate=false
          kubectl apply -f k8s/databases.yaml --validate=false
          kubectl apply -f k8s/deployment.yaml --validate=false

      # Optional: Notify Success
      - name: Notify Success
        if: success()
        run: echo "Pipeline completed successfully!"
